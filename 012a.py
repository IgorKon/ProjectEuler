# Highly divisible triangular number

# Problem 12
# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. 
# The first ten terms would be:
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
# Let us list the factors of the first seven triangle numbers:
#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.
# What is the value of the first triangle number to have over five hundred divisors?

import math
import datetime

def is_perf_sq(n):
    x=math.ceil((math.sqrt(n)))
    if x*x==n:
        return True
    else:
        return False

def max_triangular(m):
    x=3
    n=2
    num = 3
    while n<=m:
        n = 2
        num += x
        for i in range(2, math.ceil(math.sqrt(num))):
            if num % i == 0:
                n += 1
        if is_perf_sq(num):
                n -= 1
        x += 1
    return num

start_time = datetime.datetime.now()
print(start_time)

print(max_triangular(500))

stop_time = datetime.datetime.now()
print(stop_time - start_time)
